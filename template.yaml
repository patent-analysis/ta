AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: Patent Text Analysis Pipeline serverless stack to mining patent pdf documents. 
  The pipeline will be triggered when a document is added to the s3 bucket that is being watched by the ProcessPatentDocuments function.

Parameters:
  Tag:
    Type: String
    Default: latest
    Description: Docker tag to build and deploy.
  LocalEnv:
    Type: String
    Default: "false"
    Description: Run local env.

Resources:
  ProcessPatentDocuments:
    Handler: app.lambda_handler
    Type: 'AWS::Serverless::Function'
    Timeout: 900
    Properties:
      CodeUri: ./
      Description: Text mining task triggered whenever a patent document is uploaded to the S3 bucket.
      MemorySize: 1024
      Timeout: 900
      PackageType: Image
      ImageUri: !Join ['.', [!Ref AWS::AccountId, 'dkr.ecr', !Ref AWS::Region, 'amazonaws.com/', !Ref TaRepo]]
      Environment:
        Variables:
          LocalEnv: 
            Ref: LocalEnv
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Sid: "AllowS3Get"
              Action:
                - 's3:GetObject'
              Resource: 'arn:aws:s3:::*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Sid: "AllowDynamoDBAccess"
              Action:
                - "dynamodb:*"
              Resource: 'arn:aws:dynamodb:*:*:table/*'
                    
      Events:
        BucketEvent1:
          Type: S3
          Properties:
            Bucket:
              Ref: SourceBucket
            Events:
              - 's3:ObjectCreated:*'
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/process_documents
  
  SourceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: psv-document-storage
      AccessControl: BucketOwnerFullControl
  
  SourceBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: psv-document-storage
      PolicyDocument:
        Statement:
          - Sid: PublicRead
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - arn:aws:s3:::psv-document-storage/* 
          - Sid: ReadWrite
            Effect: Allow
            Principal: 
              AWS:
                - !Join [':', ['arn:aws:iam:',  !Ref AWS::AccountId, 'user/*']]   
            Action:
              - s3:*
            Resource:
              - arn:aws:s3:::psv-document-storage/*   
          - Sid: RoleReadWrite
            Effect: Allow
            Principal: 
              AWS:
                - !Join [':', ['arn:aws:iam:',  !Ref AWS::AccountId, 'role/*']]   
            Action:
              - s3:*
            Resource:
              - arn:aws:s3:::psv-document-storage/*       
